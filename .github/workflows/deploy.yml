name: Deploy to ECS (Terraform + ECR)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: us-west-1
      SERVICE_NAME: ${{ github.event.repository.name }}
      ENVIRONMENT: dev
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::269599744150:role/GitHubActionsOIDC
          role-session-name: github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Ensure Terraform backend (S3 + DynamoDB) exist
        working-directory: terraform
        run: |
          set -e

          # Use a unique bucket name that includes GitHub username to avoid conflicts
          UNIQUE_BUCKET="tfstate-${GITHUB_REPOSITORY_OWNER}-${GITHUB_SHA:0:8}"
          LOCK_TABLE="tfstate-locks-${GITHUB_REPOSITORY_OWNER}"

          echo "Creating unique S3 bucket: $UNIQUE_BUCKET"
          
          # Create bucket with proper region configuration for us-west-1
          aws s3api create-bucket \
            --bucket "$UNIQUE_BUCKET" \
            --region "$AWS_REGION" \
            --create-bucket-configuration LocationConstraint="$AWS_REGION" || {
              echo "Bucket creation failed, trying alternative name..."
              UNIQUE_BUCKET="tfstate-${GITHUB_REPOSITORY//\//-}-${GITHUB_SHA:0:12}"
              aws s3api create-bucket \
                --bucket "$UNIQUE_BUCKET" \
                --region "$AWS_REGION" \
                --create-bucket-configuration LocationConstraint="$AWS_REGION"
            }

          echo "TF_BUCKET=$UNIQUE_BUCKET" >> "$GITHUB_ENV"
          echo "TF_LOCK_TABLE=$LOCK_TABLE" >> "$GITHUB_ENV"

          # Create DynamoDB table (lock table)
          if ! aws dynamodb describe-table --table-name "$LOCK_TABLE" 2>/dev/null; then
            echo "Creating DynamoDB lock table: $LOCK_TABLE"
            aws dynamodb create-table \
              --table-name "$LOCK_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            
            # Wait for table to be active
            aws dynamodb wait table-exists --table-name "$LOCK_TABLE"
          else
            echo "DynamoDB lock table already exists: $LOCK_TABLE"
          fi
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Terraform init (S3 backend)
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET }}" \
            -backend-config="key=${{ env.SERVICE_NAME }}/${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Ensure ECR repository exists
        working-directory: terraform
        run: |
          set -e
          
          # Check if ECR repository already exists, create if not
          ECR_REPO_NAME="${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}"
          
          if ! aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region "${{ env.AWS_REGION }}" &>/dev/null; then
            echo "Creating ECR repository $ECR_REPO_NAME..."
            aws ecr create-repository \
              --repository-name "$ECR_REPO_NAME" \
              --region "${{ env.AWS_REGION }}" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
          else
            echo "ECR repository $ECR_REPO_NAME already exists"
          fi

      - name: Get ECR repository URL
        id: tfout
        run: |
          ECR_REPO_NAME="${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}"
          ECR_URL=$(aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region "${{ env.AWS_REGION }}" --query 'repositories[0].repositoryUri' --output text)
          echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_URL: ${{ steps.tfout.outputs.ecr_url }}
        run: |
          IMAGE_URI="${ECR_URL}:${{ env.IMAGE_TAG }}"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

      - name: Terraform apply (deploy service)
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var="service_name=${{ env.SERVICE_NAME }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="region=${{ env.AWS_REGION }}" \
            -var="image_tag=${{ env.IMAGE_TAG }}"

      - name: Output service URL
        working-directory: terraform
        run: |
          echo "Service URL: $(terraform output -raw service_url)"